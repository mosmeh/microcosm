/* automatically generated by rust-bindgen 0.69.4 */

pub const MULTIBOOT_HEADER: u32 = 1;
pub const MULTIBOOT_SEARCH: u32 = 8192;
pub const MULTIBOOT_HEADER_ALIGN: u32 = 4;
pub const MULTIBOOT_HEADER_MAGIC: u32 = 464367618;
pub const MULTIBOOT_BOOTLOADER_MAGIC: u32 = 732803074;
pub const MULTIBOOT_MOD_ALIGN: u32 = 4096;
pub const MULTIBOOT_INFO_ALIGN: u32 = 4;
pub const MULTIBOOT_PAGE_ALIGN: u32 = 1;
pub const MULTIBOOT_MEMORY_INFO: u32 = 2;
pub const MULTIBOOT_VIDEO_MODE: u32 = 4;
pub const MULTIBOOT_AOUT_KLUDGE: u32 = 65536;
pub const MULTIBOOT_INFO_MEMORY: u32 = 1;
pub const MULTIBOOT_INFO_BOOTDEV: u32 = 2;
pub const MULTIBOOT_INFO_CMDLINE: u32 = 4;
pub const MULTIBOOT_INFO_MODS: u32 = 8;
pub const MULTIBOOT_INFO_AOUT_SYMS: u32 = 16;
pub const MULTIBOOT_INFO_ELF_SHDR: u32 = 32;
pub const MULTIBOOT_INFO_MEM_MAP: u32 = 64;
pub const MULTIBOOT_INFO_DRIVE_INFO: u32 = 128;
pub const MULTIBOOT_INFO_CONFIG_TABLE: u32 = 256;
pub const MULTIBOOT_INFO_BOOT_LOADER_NAME: u32 = 512;
pub const MULTIBOOT_INFO_APM_TABLE: u32 = 1024;
pub const MULTIBOOT_INFO_VBE_INFO: u32 = 2048;
pub const MULTIBOOT_INFO_FRAMEBUFFER_INFO: u32 = 4096;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED: u32 = 0;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_RGB: u32 = 1;
pub const MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT: u32 = 2;
pub const MULTIBOOT_MEMORY_AVAILABLE: u32 = 1;
pub const MULTIBOOT_MEMORY_RESERVED: u32 = 2;
pub const MULTIBOOT_MEMORY_ACPI_RECLAIMABLE: u32 = 3;
pub const MULTIBOOT_MEMORY_NVS: u32 = 4;
pub const MULTIBOOT_MEMORY_BADRAM: u32 = 5;
pub type multiboot_uint8_t = ::std::os::raw::c_uchar;
pub type multiboot_uint16_t = ::std::os::raw::c_ushort;
pub type multiboot_uint32_t = ::std::os::raw::c_uint;
pub type multiboot_uint64_t = ::std::os::raw::c_ulonglong;
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_header {
    pub magic: multiboot_uint32_t,
    pub flags: multiboot_uint32_t,
    pub checksum: multiboot_uint32_t,
    pub header_addr: multiboot_uint32_t,
    pub load_addr: multiboot_uint32_t,
    pub load_end_addr: multiboot_uint32_t,
    pub bss_end_addr: multiboot_uint32_t,
    pub entry_addr: multiboot_uint32_t,
    pub mode_type: multiboot_uint32_t,
    pub width: multiboot_uint32_t,
    pub height: multiboot_uint32_t,
    pub depth: multiboot_uint32_t,
}
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_aout_symbol_table {
    pub tabsize: multiboot_uint32_t,
    pub strsize: multiboot_uint32_t,
    pub addr: multiboot_uint32_t,
    pub reserved: multiboot_uint32_t,
}
pub type multiboot_aout_symbol_table_t = multiboot_aout_symbol_table;
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_elf_section_header_table {
    pub num: multiboot_uint32_t,
    pub size: multiboot_uint32_t,
    pub addr: multiboot_uint32_t,
    pub shndx: multiboot_uint32_t,
}
pub type multiboot_elf_section_header_table_t = multiboot_elf_section_header_table;
#[repr(C, packed)]
#[derive(Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes)]
pub struct multiboot_info {
    pub flags: multiboot_uint32_t,
    pub mem_lower: multiboot_uint32_t,
    pub mem_upper: multiboot_uint32_t,
    pub boot_device: multiboot_uint32_t,
    pub cmdline: multiboot_uint32_t,
    pub mods_count: multiboot_uint32_t,
    pub mods_addr: multiboot_uint32_t,
    pub __bindgen_anon_1: multiboot_info__bindgen_ty_1,
    pub mmap_length: multiboot_uint32_t,
    pub mmap_addr: multiboot_uint32_t,
    pub drives_length: multiboot_uint32_t,
    pub drives_addr: multiboot_uint32_t,
    pub config_table: multiboot_uint32_t,
    pub boot_loader_name: multiboot_uint32_t,
    pub apm_table: multiboot_uint32_t,
    pub vbe_control_info: multiboot_uint32_t,
    pub vbe_mode_info: multiboot_uint32_t,
    pub vbe_mode: multiboot_uint16_t,
    pub vbe_interface_seg: multiboot_uint16_t,
    pub vbe_interface_off: multiboot_uint16_t,
    pub vbe_interface_len: multiboot_uint16_t,
    pub framebuffer_addr: multiboot_uint64_t,
    pub framebuffer_pitch: multiboot_uint32_t,
    pub framebuffer_width: multiboot_uint32_t,
    pub framebuffer_height: multiboot_uint32_t,
    pub framebuffer_bpp: multiboot_uint8_t,
    pub framebuffer_type: multiboot_uint8_t,
    pub __bindgen_anon_2: multiboot_info__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes)]
pub union multiboot_info__bindgen_ty_1 {
    pub aout_sym: multiboot_aout_symbol_table_t,
    pub elf_sec: multiboot_elf_section_header_table_t,
}
impl Default for multiboot_info__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes)]
pub union multiboot_info__bindgen_ty_2 {
    pub __bindgen_anon_1: multiboot_info__bindgen_ty_2__bindgen_ty_1,
    pub __bindgen_anon_2: multiboot_info__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_info__bindgen_ty_2__bindgen_ty_1 {
    pub framebuffer_palette_addr: multiboot_uint32_t,
    pub framebuffer_palette_num_colors: multiboot_uint16_t,
}
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_info__bindgen_ty_2__bindgen_ty_2 {
    pub framebuffer_red_field_position: multiboot_uint8_t,
    pub framebuffer_red_mask_size: multiboot_uint8_t,
    pub framebuffer_green_field_position: multiboot_uint8_t,
    pub framebuffer_green_mask_size: multiboot_uint8_t,
    pub framebuffer_blue_field_position: multiboot_uint8_t,
    pub framebuffer_blue_mask_size: multiboot_uint8_t,
}
impl Default for multiboot_info__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl Default for multiboot_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type multiboot_info_t = multiboot_info;
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_color {
    pub red: multiboot_uint8_t,
    pub green: multiboot_uint8_t,
    pub blue: multiboot_uint8_t,
}
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_mmap_entry {
    pub size: multiboot_uint32_t,
    pub addr: multiboot_uint64_t,
    pub len: multiboot_uint64_t,
    pub type_: multiboot_uint32_t,
}
pub type multiboot_memory_map_t = multiboot_mmap_entry;
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_mod_list {
    pub mod_start: multiboot_uint32_t,
    pub mod_end: multiboot_uint32_t,
    pub cmdline: multiboot_uint32_t,
    pub pad: multiboot_uint32_t,
}
pub type multiboot_module_t = multiboot_mod_list;
#[repr(C, packed)]
#[derive(
    Debug, Default, Copy, Clone, zerocopy :: FromZeroes, zerocopy :: FromBytes, zerocopy :: AsBytes,
)]
pub struct multiboot_apm_info {
    pub version: multiboot_uint16_t,
    pub cseg: multiboot_uint16_t,
    pub offset: multiboot_uint32_t,
    pub cseg_16: multiboot_uint16_t,
    pub dseg: multiboot_uint16_t,
    pub flags: multiboot_uint16_t,
    pub cseg_len: multiboot_uint16_t,
    pub cseg_16_len: multiboot_uint16_t,
    pub dseg_len: multiboot_uint16_t,
}
